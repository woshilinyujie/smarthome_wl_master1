package com.fbee.smarthome_wl.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fbee.smarthome_wl.greendao.Icon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ICON.
*/
public class IconDao extends AbstractDao<Icon, Long> {

    public static final String TABLENAME = "ICON";

    /**
     * Properties of entity Icon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Typeid = new Property(1, Integer.class, "typeid", false, "TYPEID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Imageurl = new Property(4, String.class, "imageurl", false, "IMAGEURL");
        public final static Property Imageres = new Property(5, Integer.class, "imageres", false, "IMAGERES");
        public final static Property Account = new Property(6, String.class, "account", false, "ACCOUNT");
        public final static Property Gateway = new Property(7, String.class, "gateway", false, "GATEWAY");
    };


    public IconDao(DaoConfig config) {
        super(config);
    }
    
    public IconDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ICON' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TYPEID' INTEGER," + // 1: typeid
                "'TYPE' INTEGER," + // 2: type
                "'NAME' TEXT," + // 3: name
                "'IMAGEURL' TEXT," + // 4: imageurl
                "'IMAGERES' INTEGER," + // 5: imageres
                "'ACCOUNT' TEXT," + // 6: account
                "'GATEWAY' TEXT);"); // 7: gateway
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ICON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Icon entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer typeid = entity.getTypeid();
        if (typeid != null) {
            stmt.bindLong(2, typeid);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(5, imageurl);
        }
 
        Integer imageres = entity.getImageres();
        if (imageres != null) {
            stmt.bindLong(6, imageres);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(7, account);
        }
 
        String gateway = entity.getGateway();
        if (gateway != null) {
            stmt.bindString(8, gateway);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Icon readEntity(Cursor cursor, int offset) {
        Icon entity = new Icon( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // typeid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageurl
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // imageres
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // account
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // gateway
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Icon entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageurl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImageres(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAccount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGateway(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Icon entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Icon entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
